from flask import Flask, request, jsonify, render_template
from bs4 import BeautifulSoup
import json
import logging
import os
from langchain_ollama import OllamaLLM
from langchain_core.prompts import ChatPromptTemplate
import re

app = Flask(__name__)

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


class OllamaBot:
    def __init__(self, model_name):
        """
        Initialize the OllamaBot with the specified model.
        
        Args:
            model_name (str): Name of the Ollama model.
            base_directory (str): Path to the base directory containing .htm files.
        """
        self.model = OllamaLLM(model=model_name)  # Instantiate the Ollama model
        self.base_directory = "Data"
        self.contents = []  # Store processed content
        self._load_content()

    def _list_htm_files(self):
        """
        Recursively finds all .htm files in the base directory and its subdirectories.
        
        Returns:
            list: A list of file paths relative to the base directory.
        """
        htm_files = []
        for root, _, files in os.walk(self.base_directory):
            for file in files:
                if file.endswith(".htm"):
                    relative_path = os.path.relpath(os.path.join(root, file), start=self.base_directory)
                    htm_files.append(self.base_directory + "/" + relative_path)
        return htm_files

    def _load_content(self):
        """
        Load and process all .htm files from the base directory.
        """
        htm_files = self._list_htm_files()
        logging.info(f"Found {len(htm_files)} .htm files.")

        for file_path in htm_files:
            try:
                with open(file_path, encoding="utf-8") as file:
                    content = file.read()
                    self.contents.append(content)
            except UnicodeDecodeError:
                logging.error(f"Could not read the file {file_path}. Check the file encoding.")

    def add(self, content):
        """
        Add new content to the bot's memory.
        
        Args:
            content (str): Content to add.
        """
        self.contents.append(content)
        logging.info("New content added.")

    def query(self, question):
        """
        Query the bot and get a response.

        Args:
            question (str): The user's question.

        Returns:
            str: The response generated by the Ollama model.
        """
        logging.info(f"Processing question: {question}")

        template = """
        Answer questions for users who wanted to look for help from the GEO help Guide.

        Question: {question}

        As a GEO help guide, I can help you with the following topics:
        {topics}

        Answer: 
        """

        prompt = ChatPromptTemplate.from_template(template)

        model = OllamaLLM(model = "llama3")

        chain = prompt | model # chain the operations together.

        topics = "Curve Data, MWD, LWD"

        response = chain.invoke({"question": question, "topics": topics})

        return response


# Initialize OllamaBot
model_name = "llama3"  
ai_bot = OllamaBot(model_name)


# Process uploaded file
def process_file(file_path):
    try:
        with open(file_path, encoding="utf-8") as file:
            content = file.read()
            ai_bot.add(content)
        return "File processed successfully."
    except UnicodeDecodeError:
        logging.error(f"Error: Could not read the file {file_path}. Please check the file encoding.")
        return "Error: Invalid file encoding."


@app.route("/")
def index():
    return render_template("index.html")


@app.route("/upload", methods=["POST"])
def upload():
    if "file" not in request.files:
        return jsonify({"error": "No file part"}), 400

    file = request.files["file"]
    if file.filename == "":
        return jsonify({"error": "No selected file"}), 400

    if file:
        file_path = f"./Data/{file.filename}"
        file.save(file_path)
        result = process_file(file_path)
        return jsonify({"message": result})


@app.route("/ask", methods=["POST"])
def ask():
    data = request.json
    question = data.get("question", "").strip()
    if not question:
        return jsonify({"error": "Question cannot be empty"}), 400
    response = ai_bot.query(question)

    print(response)
    print(type(response))

    # check through the response string and add <br> to replace the new line character
    response = response.replace("\n", "<br>")

    # check if both end of a string has "**", the replace with bold font tags
    response = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', response)

    return jsonify({"response": response})


if __name__ == "__main__":
    app.run(debug=True)
